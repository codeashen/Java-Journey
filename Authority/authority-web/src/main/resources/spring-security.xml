<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans          
    http://www.springframework.org/schema/beans/spring-beans.xsd          
    http://www.springframework.org/schema/security          
    http://www.springframework.org/schema/security/spring-security.xsd">
    
    <!-- 配置不拦截的资源 -->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    
    <!-- 
    	配置具体的规则 
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）
    -->
    <security:http auto-config="true" use-expressions="true">
    	<!-- 配置具体的拦截的规则
    		pattern="请求路径的规则"
    		access="访问系统的人，必须有ROLE_USER的角色"，开启SPEL表达式的话，需要以表达式方式写 -->
    	<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
    	
    	<!-- 定义跳转的具体的页面 -->
    	<security:form-login  
    		login-page="/login.jsp"
    		login-processing-url="/login"
    		default-target-url="/index.jsp"
    		authentication-failure-url="/login.jsp"
    	/>
    	
    	<!-- 关闭跨域请求 -->
    	<security:csrf disabled="true"/>
    	
    	<!-- 退出登陆 -->
    	<security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp" />
    	
    </security:http>
    
    <!-- 认证管理器，切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
    	<security:authentication-provider user-service-ref="userService">
    		<!-- 配置加密的方式 -->
    		<security:password-encoder ref="passwordEncoder"/>
    	</security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>


	<!-- 服务端方法级权限控制
	 	1、JSR-250注解
	 		1）pom文件中导入JSR-250依赖
	 		2）Spring Security配置文件中开启注解支持
	 		3）方法上使用注解
	 			@RolesAllowed	表示访问对应方法时所应该具有的角色
	 			@PermitAll		表示允许所有的角色进行访问，也就是说不进行权限控制
	 			@DenyAll		和PermitAll相反的，表示无论什么角色都不能访问
	 	2、@Secured注解
	 		Spring Security内置的注解，不需要再引入依赖了
	 		直接在方法上使用@Secured注解
	 	3、支持表达式的注解
	 		@PreAuthorize	在方法调用之前,基于表达式的计算结果来限制对方法的访问
	 		@PostAuthorize 	允许方法调用,但是如果表达式计算结果为false,将抛出一个安全性异常
	 		@PostFilter 	允许方法调用,但必须按照表达式来过滤方法的结果
			@PreFilter 		允许方法调用,但必须在进入方法之前过滤输入值
	 -->
	<!-- 开启JSR-250注解 -->
	<!--<security:global-method-security jsr250-annotations="enabled"/>-->
	<!-- 开启@Secured注解 -->
	<!--<security:global-method-security secured-annotations="enabled"/>-->
	<!-- 开启表达式的注解 -->
	<security:global-method-security pre-post-annotations="enabled"/>

	<!-- 配置这个bean，上面25行的access就可以不用SPEL表达式 -->
	<!--<bean id="webSecurityExpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>-->

 </beans>   
 
 
 
 
 
 
 
 
 
 
 
 
 